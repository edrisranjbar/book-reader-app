import db
from typing import List, Any


class Book:
    def __init__(self):
        self.table_name = "book"
        db.do_connect()
        self.create_table()

    def __del__(self):
        db.disconnect()

    def create_table(self):
        query = f"""
        CREATE TABLE IF NOT EXISTS {self.table_name} (id INT NOT NULL 
        GENERATED BY DEFAULT AS IDENTITY ( START 1 ), CONSTRAINT 
        {self.table_name}_id PRIMARY KEY (id), name TEXT NOT NULL, 
        description TEXT, author_id integer[], price integer, image TEXT, 
        discount_percentage integer, pages_count integer, publisher_id 
        integer[], category_id integer[], translator_id integer[] not null 
        default """ + "'{}'" + """, 
        publish_date TEXT)"""
        try:
            db.cursor.execute(query)
            return True
        except db.Error as error:
            print(error)
            return False

    def add(self, *, name: str, description: str, author_id: List, price:
    int, image: str, discount_percentage: int, pages_count: int,
            publisher_id: List,
            category_id: List, translator_id: List, publish_date: str) -> bool:
        query = f"INSERT INTO {self.table_name} (name, description,author_id, " \ 
                f"price,image,discount_percentage,pages_count," \
                f"publisher_id,category_id,translator_id,publish_date) VALUES (" \
                f"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
        try:
            db.cursor.execute(query, (name, description, author_id, price,
                                      image,
                                      discount_percentage, pages_count,
                                      publisher_id, category_id, translator_id,
                                      publish_date))
            return True
        except db.Error as error:
            print(error)
            return False

    def update(self, *, book_id: int, name: str, description: str,
               author_id: List, price: int, image: str,
               discount_percentage: int,
               pages_count: int, publisher_id: List,
               category_id: List, translator_id: List,
               publish_date: str) -> bool:
        query = f"UPDATE {self.table_name} SET name=%s,description=%s," \
                f"author_id=%s,price=%s,image=%s,discount_percentage=%s," \
                f"pages_count=%s,publisher_id=%s,category_id=%s,publish_date " \
                f"translator_id=%s, publish_date=%s WHERE id=%s"
        try:
            db.cursor.execute(query,
                              (name, description, author_id, price, image,
                               discount_percentage, pages_count,
                               publisher_id, category_id, translator_id,
                               publish_date, book_id))
            return True
        except db.Error as error:
            print(error)
            return False

    def delete(self, book_id: int):
        query = f"DELETE FROM {self.table_name} WHERE id=%s"
        db.cursor.execute(query, (book_id,))
        return True

    def get(self, book_id: int) -> List:
        query = f"SELECT * FROM {self.table_name} WHERE id=%s"
        try:
            db.cursor.execute(query, (book_id,))
            book_details: List[Any] = db.cursor.fetchone()
            for detail in book_details:
                return {
                    'id': detail[0],
                    'name': detail[1],
                    'description': detail[2],
                    'author_id': detail[3],
                    'price': detail[4],
                    'image': detail[5],
                    'discount_percentage': detail[6],
                    'pages_count': detail[7],
                    'publisher_id': detail[8],
                    'category_id': detail[9],
                    'translator_id': detail[10],
                    'publish_date': detail[11]
                }
        except db.Error as error:
            return []

    def get_all(self) -> List:
        """ Get all of books and return as a List """
        query = f"SELECT * FROM {self.table_name}"
        try:
            db.cursor.execute(query)
            books: List[Any] = db.cursor.fetchall()
        except db.Error:
            return []
        books_array = []
        for book in books:
            book_dict = {
                'id': book[0],
                'name': book[1],
                'description': book[2],
                'author_id': book[3],
                'price': book[4],
                'image': book[5],
                'discount_percentage': book[6],
                'pages_count': book[7],
                'publisher_id': book[8],
                'category_id': book[9],
                'translator_id': book[10],
                'publish_date': book[11]
            }
            books_array.append(book_dict)
        return books_array

    def count(self) -> int:
        query = f"SELECT count(*) FROM {self.table_name}"
        db.cursor.execute(query)
        count = db.cursor.fetchone()[0]
        db.disconnect()
        return int(count)

    def exist(self, book_id: int) -> bool:
        query = f"SELECT COUNT (*) FROM {self.table_name} WHERE id=%s"
        db.cursor.execute(query, (book_id,))
        count = db.cursor.fetchone()[0]
        db.disconnect()
        return int(count) > 0
