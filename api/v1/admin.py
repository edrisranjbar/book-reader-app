import db
from typing import List, Any
from sms_token import Token
from sms import SMS


class Admin(Token):
    def __init__(self, mobile):
        super().__init__(mobile)
        self.table_name = "admin"
        db.do_connect()
        self.create_table()

    def __del__(self):
        db.disconnect()

    def create_table(self):
        query = f"""
        CREATE TABLE IF NOT EXISTS {self.table_name} (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( START 1 ),
        CONSTRAINT {self.table_name}_id PRIMARY KEY (id), name VARCHAR(10) NOT NULL, email TEXT UNIQUE ,mobile TEXT 
        NOT NULL UNIQUE); """
        db.cursor.execute(query)
        return True

    def add(self, name: str, email: str, mobile: str) -> bool:
        query = f"INSERT INTO {self.table_name} (name, email, mobile) VALUES (%s,%s,%s)"
        db.cursor.execute(query, (name, email, mobile))
        return True

    def update(self, admin_id: int, admin_name: str, admin_email: str, admin_mobile: str) -> bool:
        query = f"UPDATE {self.table_name} SET name=%s,email=%s,mobile=%s WHERE id=%s"
        db.cursor.execute(query, (admin_name, admin_email, admin_mobile, admin_id))
        return True

    def delete(self, admin_id: int):
        query = f"DELETE FROM {self.table_name} WHERE id=%s"
        db.cursor.execute(query, (admin_id,))
        return True

    def get_all(self) -> List:
        """ Get all of categories and return as a List """
        query = f"SELECT * FROM {self.table_name}"
        try:
            db.cursor.execute(query)
            admins: List[Any] = db.cursor.fetchall()
        except db.Error:
            return []
        admins_array = []
        for admin in admins:
            admin_dict = {
                'id': admin[0], 'name': admin[1], 'email': admin[2], 'mobile': admin[3]
            }
            admins_array.append(admin_dict)
        return admins_array

    def exist(self, email: str, mobile: str) -> bool:
        query = f"SELECT COUNT (*) FROM {self.table_name} WHERE email=%s OR mobile=%s"
        db.cursor.execute(query, (email, mobile))
        count = db.cursor.fetchone()[0]
        return int(count) > 0

    def request_login(self, mobile) -> bool:
        token = Token(mobile).create()
        # Send SMS containing Token to the mobile
        sms_result = SMS.send_token(token, mobile)
        if sms_result['status'] == 200:
            return True
        else:
            return False

    def verify_login(self, mobile, user_token) -> bool:
        return Token(mobile).verify(user_token)
